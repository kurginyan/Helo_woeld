package com.web;

import org.apache.poi.ss.usermodel.*;

import java.io.FileInputStream;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

class ReadExcelRows {


    public static void main(String[] args) throws Exception {

        Workbook workbook = WorkbookFactory.create(new FileInputStream("CMSSpreadsheets/EmailTemplatePageConfiguration - SRS+.xlsx"));
        //use DataFormatter to convert to string all cell values, as the search value is a string
        DataFormatter formatter = new DataFormatter();
        //To support formula cells, DataFormatter must be used together with FormulaEvaluator.
        FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();

        String searchValues = "USER_ACCOUNT_DETAILS,PASSWORD_RECOVERY_EMAIL,RESELLER_CREDIT_CARD_TOP_UP_CONFIRMATION_EMAIL,AUTO_TOPUP_SUCCESS_EMAIL,RESELLER_LOW_BALANCE_REMINDER_EMAIL,RESELLER_ACTIVATION_EMAIL,PARTNER_MONTHLY_INVOICE_REMINDER_EMAIL,PARTNER_PRODUCTFAMILY_EXPIRY_EMAIL,NEW_ORDER_CONFIRM_EMAIL,CANCEL_ORDER_CONFIRM_EMAIL,RENEW_ORDER_CONFIRM_EMAIL,GENERIC_SAFE_RENEW,GENERIC_SAFE_RENEW_FAIL,SHOPPINGCART_CONFIRMATION_EMAIL,SHOPPINGCART_FAILURE_EMAIL,GENERIC_EXPIRATION_EMAIL,TRANSFER_PENDING,TRANSFER_COMPLETE,TRANSFER_FAILED_EMAIL,TRANSFER_AUTHCODE_EMAIL ,DOMAIN_TRANSFER_OUT_EMAIL,DOMAIN_TRANSFER_OUT_COMPLETE,DOMAIN_TRANSFER_OUT_DENIED,TRANSFER_IPSTAG_INFO_EMAIL,DOMAIN_AUCTION_COMPLETE_EMAIL,AUCTION_ORDER_COMPLETE_NEW_CUSTOMER_EMAIL,SNAPNAMES_AUCTION_ORDER_COMPLETE_NEW_CUSTOMER_EMAIL,AUCTION_ORDER_COMPLETE_EXISTING_CUSTOMER_EMAIL,SNAPNAMES_AUCTION_ORDER_COMPLETE_EXISTING_CUSTOMER_EMAIL,NEW_ORDER_CONFIRM_EMAIL,RENEW_ORDER_CONFIRM_EMAIL,DOMAIN_SAFERENEW_FAIL_EMAIL,DOMAIN_RETENTION_REMINDER_EMAIL,DOMAIN_SAFERENEW_REMINDER_EMAIL,DOMAIN_MANUAL_REGISTRATION_PENDING,DOMAIN_PRE_REGISTRATION_ORDER_CONFIRM_EMAIL,DOMAIN_PRE_REGISTRATION_ORDER_FAILED_EMAIL,DOMAIN_ONE_DAY_AFTER_EXPIRATION,DOMAIN_MANUAL_INFO_REQUEST_EMAIL,PREMIUM_DOMAIN_ORDER_CONFIRMATION_EMAIL,DOMAIN_SAFERENEW_GENERIC_FAIL_EMAIL,GENERIC_SAFE_RENEW_FAIL,DOMAIN_DNS_HOSTING_RENEW_ORDER_CONFIRMATION_EMAIL,NEW_ORDER_CONFIRM_EMAIL,VERIFICATION_RCOM_WHOLESALE,VERIFICATION_SRSPLUS_WHOLESALE,VERIFICATION_NSI_WHOLESALE,BUNDLE_CONFIGURE_CONFIRMATION,HOSTING_NEW_ORDER_CONFIRM_EMAIL,CERTIFICATE_NEW_ORDER_CONFIRM_EMAIL,GENERIC_EMAIL_CANCELATION,HOSTING_MOBILE_ORDER_CONFIRM_EMAIL,MAIL_CANCEL_ORDER_CONFIRM_EMAIL,MAIL_NEW_ORDER_CONFIRM_EMAIL,NEW_ORDER_CONFIRM_EMAIL,NEW_ORDER_CONFIRM_EMAIL,SITE_SECURITY_CONFIRMATION_EMAIL,VAS_PRODUCT_RENEW_CONFIRMATION_EMAIL,DOMAIN_RESTORE_ORDER_CONFIRMATION_EMAIL,MAILFORWARD_SERVICE_CONFIRM_EMAIL,ORDER_FAILED_EMAIL,ORDER_PENDING_EMAIL,RENEWAL_DELETION_NOTICE_EMAIL,TRANSFER_WHOIS_UPDATE_REQUEST_EMAIL,URLFORWARDING_AUTHORIZATION_EMAIL";

        //_EMAIL is removed from search
        //String searchValues = "USER_ACCOUNT_DETAILS,PASSWORD_RECOVERY,RESELLER_CREDIT_CARD_TOP_UP_CONFIRMATION,AUTO_TOPUP_SUCCESS,RESELLER_LOW_BALANCE_REMINDER,RESELLER_ACTIVATION,PARTNER_MONTHLY_INVOICE_REMINDER,PARTNER_PRODUCTFAMILY_EXPIRY,NEW_ORDER_CONFIRM,CANCEL_ORDER_CONFIRM,RENEW_ORDER_CONFIRM,GENERIC_SAFE_RENEW,GENERIC_SAFE_RENEW_FAIL,SHOPPINGCART_CONFIRMATION,SHOPPINGCART_FAILURE,GENERIC_EXPIRATION,TRANSFER_PENDING,TRANSFER_COMPLETE,TRANSFER_FAILED,TRANSFER_AUTHCODE ,DOMAIN_TRANSFER_OUT,DOMAIN_TRANSFER_OUT_COMPLETE,DOMAIN_TRANSFER_OUT_DENIED,TRANSFER_IPSTAG_INFO,DOMAIN_AUCTION_COMPLETE,AUCTION_ORDER_COMPLETE_NEW_CUSTOMER,SNAPNAMES_AUCTION_ORDER_COMPLETE_NEW_CUSTOMER,AUCTION_ORDER_COMPLETE_EXISTING_CUSTOMER,SNAPNAMES_AUCTION_ORDER_COMPLETE_EXISTING_CUSTOMER,NEW_ORDER_CONFIRM,RENEW_ORDER_CONFIRM,DOMAIN_SAFERENEW_FAIL,DOMAIN_RETENTION_REMINDER,DOMAIN_SAFERENEW_REMINDER,DOMAIN_MANUAL_REGISTRATION_PENDING,DOMAIN_PRE_REGISTRATION_ORDER_CONFIRM,DOMAIN_PRE_REGISTRATION_ORDER_FAILED,DOMAIN_ONE_DAY_AFTER_EXPIRATION,DOMAIN_MANUAL_INFO_REQUEST,PREMIUM_DOMAIN_ORDER_CONFIRMATION,DOMAIN_SAFERENEW_GENERIC_FAIL,GENERIC_SAFE_RENEW_FAIL,DOMAIN_DNS_HOSTING_RENEW_ORDER_CONFIRMATION,NEW_ORDER_CONFIRM,VERIFICATION_RCOM_WHOLESALE,VERIFICATION_SRSPLUS_WHOLESALE,VERIFICATION_NSI_WHOLESALE,BUNDLE_CONFIGURE_CONFIRMATION,HOSTING_NEW_ORDER_CONFIRM,CERTIFICATE_NEW_ORDER_CONFIRM,GENERIC_CANCELATION,HOSTING_MOBILE_ORDER_CONFIRM,MAIL_CANCEL_ORDER_CONFIRM,MAIL_NEW_ORDER_CONFIRM,NEW_ORDER_CONFIRM,NEW_ORDER_CONFIRM,SITE_SECURITY_CONFIRMATION,VAS_PRODUCT_RENEW_CONFIRMATION,DOMAIN_RESTORE_ORDER_CONFIRMATION,MAILFORWARD_SERVICE_CONFIRM,ORDER_FAILED,ORDER_PENDING,RENEWAL_DELETION_NOTICE,TRANSFER_WHOIS_UPDATE_REQUEST,URLFORWARDING_AUTHORIZATION";

        List<String> templates = Arrays.asList(searchValues.split(","));

        for (String searchValue: templates){
            List<Row> filteredRows = getRowPerSheet(workbook, formatter, evaluator, searchValue);

            System.out.println("\n"+searchValue);
            for (Row row : filteredRows) {
                System.out.println("---> Line: "+row.getRowNum()+" sheet: "+row.getSheet().getSheetName());
            }
        }
        workbook.close();
    }

    //get rows where cell values contain search string
    static List<Row> getRows(Sheet sheet, DataFormatter formatter, FormulaEvaluator evaluator, String searchValue) {
        List<Row> result = new ArrayList<Row>();
        String cellValue = "";
        for (Row row : sheet) {
            for (Cell cell : row) {
                //The formatCellValue method of DataFormatter returns all cell values as formatted strings.
                cellValue = formatter.formatCellValue(cell, evaluator);
                if (cellValue.contains(searchValue)) {
                    result.add(row);
                    break;
                }
            }
        }
        return result;
    }

    //get a rows from each sheet where cell values contain search string
    static List<Row> getRowPerSheet(Workbook workbook, DataFormatter formatter, FormulaEvaluator evaluator, String searchValue) {
        List<Row> result = new ArrayList<Row>();

        for (int i = 0; i < workbook.getNumberOfSheets(); i++) {
            Sheet sheet = workbook.getSheetAt(i);

            String cellValue = "";

            for (Row row : sheet) {
                Cell cell = row.getCell(7);
                //The formatCellValue method of DataFormatter returns all cell values as formatted strings.
                cellValue = formatter.formatCellValue(cell, evaluator);
//                if (cellValue.toLowerCase().contains(searchValue.toLowerCase())) {
                if (cellValue.equalsIgnoreCase(searchValue)) {

                    result.add(row);
                    break;
                }
            }
        }

        return result;
    }
}